AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  radio2spotify

  Sample SAM Template for radio2spotify
Parameters:
  Stage:
    Type: String
    Default: dev
  SlackChannel:
    Type: String
    Default: "radio2spotify-app-prod"
  PlaylistDebugPrefix:
    Type: String
    Default: ""

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Runtime: python3.8
    Environment:
      Variables:
        TRACKS_TABLE_NAME: !Sub "${Stage}-tracks"
        PLAYLIST_TABLE_NAME: !Sub "${Stage}-playlists"
        QUEUE_URL: !Ref MySqsQueue
        MAX_NUMBER_TRACKS_IN_PLAYLIST: 10000
        PLAYLIST_PREFIX: !Sub "${PlaylistDebugPrefix}radioeins.de (unofficial) - live playlist!"
        STAGE: !Sub "${Stage}"
        SLACK_CHANNEL: !Ref SlackChannel
Resources:
  PullTracksFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: reader/
      Handler: pull_tracks_handler.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TracksTable
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt MySqsQueue.QueueName
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sqs:GetQueueUrl
              Resource: arn:aws:sqs:*:*:*
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:*
              Resource: arn:aws:secretsmanager:*:*:*
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(15 minutes)
  PullOlderTracksFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: reader/
      Handler: pull_tracks_handler.handlerOlderTracks
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TracksTable
        - SQSSendMessagePolicy:
            QueueName:
              !GetAtt MySqsQueue.QueueName
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sqs:GetQueueUrl
              Resource: arn:aws:sqs:*:*:*
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:*
              Resource: arn:aws:secretsmanager:*:*:*
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: cron(10 2 * * ? *)
  StoreTracksInSpotify:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: reader/
      Handler: store_tracks_in_spotify_handler.handler
      ReservedConcurrentExecutions: 1
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:*
              Resource: arn:aws:dynamodb:*:*:*
        - SQSPollerPolicy:
            QueueName:
              !GetAtt MySqsQueue.QueueName
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sqs:GetQueueUrl
              Resource: arn:aws:sqs:*:*:*
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:*
              Resource: arn:aws:secretsmanager:*:*:*
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MySqsQueue.Arn
            BatchSize: 10
  UpdateSpotifyTokensFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: reader/
      Handler: refresh_spotify_token_handler.handler
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: secretsmanager:*
              Resource: arn:aws:secretsmanager:*:*:*
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(27 minutes)
  TracksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Stage}-tracks"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 3
        WriteCapacityUnits: 3
  PlaylistsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Stage}-playlists"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  MySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: !Sub "${Stage}-new-tracks.fifo"
      ContentBasedDeduplication: true
      VisibilityTimeout: 30
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "mail+r2s@renekann.de"
          Protocol: email
  QueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if queue depth grows beyond 10 messages"
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: "QueueName"
          Value:
            Fn::GetAtt:
              - "MySqsQueue"
              - "QueueName"
      Statistic: Minimum
      Period: 600 #10 minutes
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AlarmTopic
      InsufficientDataActions:
        - Ref: AlarmTopic
      OKActions:
        - Ref: AlarmTopic